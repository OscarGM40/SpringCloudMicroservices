				MICROSERVICES USING SPRING BOOT AND SPRING CLOUD

Playlist: https://www.youtube.com/watch?v=p485kUNpPvE&ab_channel=Amigoscode
Repo: https://github.com/amigoscode/microservices

Vamos a crear una pequeña app usando un patrón de microservicios.Un MS será customer,que se comunicará con Fraud mediante el broker apache Kafka(RabbitMQ??).También tendremos notificaciones con Twilio??.
Customer usará PostgreSQL,mientras que Fraud usará MongoDB.Notification usará PostgreSQL también.

IMPORTANTE: Spring Cloud es el módulo dentro del ecosistema Spring que se ocupa de construir Microservicios.Puedo ver en https://spring.io que Spring Cloud es inmenso,igual que el ecosistema Spring, asi que debo tomarlo con calma.

			INSTALAR MAVEN EN EL SISTEMA- CREAR UN PROYECTO CON MAVEN

Para este proyecto vamos a generarlo con maven.Puedo ver si lo tengo instalado tratando de imprimir su version:
mvn --version (tengo la 3.6.3)

Apache Maven 3.6.3
Maven home: /usr/share/maven <- y aqui el binario
Java version: 11.0.13, vendor: Ubuntu, runtime: /usr/lib/jvm/java-11-openjdk-amd64 <- y observo también que está enlazado a java 11 con open-jdk

Si no lo tuviera instalado lo puedo hacer con brew:
brew install maven <- diria que hay que tener la jdk primero,asinto

Puedo exportarla al path con:
export PATH=/opt/apache-maven-3.8.4/bin:$PATH (cambiar por mi ruta)

Crear un proyecto.Fijate que creará un directorio con el nombre que le dé a el -DartifactId:

mvn archetype:generate -DgroupId=com.amigoscode -DartifactId=springcloud -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false

Ya puedo hacer un cd a springcloud,pues lo he llamado asi al proyecto.Puedo hacer un 'tree' y veré la estructura gráficamente(brew install tree).
Veré el pom.xml en la raiz y toda la estructura,super útil.

Bien,lo mejor es instalar las jetbrains toolbox desde su web,ya que me dará acceso a todos sus IDEs de forma fácil.Una vez concluido,abro IntelliJ y en file/proyectSettings me bajo el jdk 17 que es LTS y además es el que usaremos en el curso.

					SETTING UP PARENT MODULE DEPENDENCIES

Vamos a usar Maven Multi-module,dejando que cada sub-modulo eliga las subdependencias que importar(cada MS).Para ello engo que usar la tag <dependencyMnagement> de esta forma en el pom padre:

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring.boot.dependencies.version}</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>
    </dependencies>
  </dependencyManagement>

Todas las dependencias que ponga aqui podrán ser elegidas por los hijos.Pero también puedo definir una zona con dependencias que tendrán todos,como por ejemplo lombok y spring-boot-starter-test:

  <dependencies>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
    </dependency>
  </dependencies>

En resumen,todo lo que englobe en dependencies lo instalarán los hijos,lo que defina en dependencyManagement será elegible,pero no instalado.Fijate que puedo declara variables en la zona properties:

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
    <spring.boot.maven.plugin.version>2.5.7</spring.boot.maven.plugin.version>
    <spring.boot.dependencies.version>2.5.7</spring.boot.dependencies.version>
  </properties>

Y luego inyectar esa version.Al final tengo que ver en Maven/dependencies(a la derecha) las dos dependencias.Puedo ejecutar maven clean y maven validate para ver si compila exitosamente,aunque no tenga código aún lo debe hacer.

				CREANDO NUESTRO PRIMER MICROSERVICE

Bien,situandome en el proyecto click derecho,nuevo modulo y eligo tipo Maven,ya que estamos con maven.Le doy next y el nombre de customer.
Esto creará una aplicación embebida y varias cosas:

En el parent pom puedo ver que se agregó la tag <modules>:
 <modules>
    <module>customer</module>
  </modules>

En el hijo puedo ver su sección <parent>,especificando quien es su padre:

 <parent>
    <artifactId>springcloud</artifactId>
    <groupId>com.amigoscode</groupId>
    <version>1.0-SNAPSHOT</version>
 </parent>
Obviamente esta correcto,pues el artifactId del padre es ese. 

Bien,creo un paquete y la clase anotada con @SpringbootApplication.TAmbién hay que crear el application.yml | application.properties.
Puedo buscar por 'spring boot banner.txt generator' y copio algun texto a ese banner.txt(que va en resources).No necesita nada más,se verá el banner al ejecutar la pp.
Ejecuto nuestro primer MS,y veré el banner.Obviamente no tiene nada,pero fue muy fácil enlazarlo realmente.
Recuerda,docker stop <name> para parar un contenedor,docker start<name>  para arrancar un contenedor parado y docker restart <name> para parar+arrancar.

					MINUTO 33 CREANDO EL MS CUSTOMER

Empiezo por crear el Modelo/Entidad,despues el controlador

IMPORTANTE: fijate que el controlador ha usado un record() y que ese record ha necesitado parentesis,pero parece una clase:

@RestController
@RequestMapping("api/v1/customers")
@Slf4j
public record CustomerController(CustomerService customerService) {

    @PostMapping
    public void registerCustomer(@RequestBody CustomerRegistrationRequest customerRegistrationRequest) {
        log.info("new customer registration {}", customerRegistrationRequest);
    }
}

Usa un record para ganar inmutabilidad.Fijate que le puede pasar argumentos,lo cual parece muy útil.

Fijate que anotar una clase con @Builder me permite poder usar el patrón Builder,el cual usa un constructor privado:

    public void registerCustomer(CustomerRegistrationRequest request) {
        Customer customer = Customer.builder()
                .firstName(request.firstName())
                .lastName(request.lastName())
                .email(request.email())
                .build();
        // todo: check if email valid
        // todo: check if email not taken
        // todo: store customer in db
        
    }

Bien,lo siguiente es crear un docker-compose con postgres+pgadmin.Ojo,voy a sacar el postgres por el 5434,pero para el pgadmin lo tiene en el 5432 pues está en la misma interfaz de red y la interfaz por el 5050
IMPORTANTE: puedo ver con docker volume ls los volumenes y con docker system df | docker system info información sobre todo el sistema Docker(llevo 15G ya de volumenes).

NOTA:fijate que ahora PgAdmin pide una Pass maestra,usé la mediana.Fijate también que siempre va a crear una database con el nombre del usuario,como he usado como user amigoscode tendré esa database,aparte de la de postgres que siempre existe.

Bien,tras configurar correctamente el docker-compose es hora de ir al application.yml.Entiendo que ahora si es el 5434??.Si no cambiar

server:
  port: 8080
spring:
  application:
    name: customer
  datasource:
    username: 'amigoscode'
    url: jdbc:postgresql://localhost:5434/customer
    password: 'password'
    jpa:
      properties:
        hibernate:
          dialect: org.hibernate.dialect.PostgreSQLDialect
          format_sql: 'true'
      hibernate:
        ddl-auto: update
      show-sql: 'true'

Fijate que no tengo la db creada.Puedo hacerlo desde la interfaz gráfica.Además veré el ownsership de la db,que obviamente va para amigoscode.

IMPORTANTE: faltaría ir al pom.xml de customer y añadir el driver para postgresql

Fijate que 'spring-boot-starter-web' es para crear una REST API,'spring-boot-starter-data-jpa' es para conectar con la api JPA y poder usar Spring Data y 'postgresl' es el driver.Debería verlas en la sección maven tras refrescar.

Terminamos de settear la entidad.Fijate que ha usado el primitivo int por valor
@Data
@Builder
@Entity
@AllArgsConstructor
@NoArgsConstructor
public class Customer {
    @Id
    @SequenceGenerator(
            name="customer_id_sequence",
            sequenceName = "customer_id_sequence"
    )
    @GeneratedValue(
            strategy = GenerationType.SEQUENCE,
            generator = "customer_id_sequence"
    )
    private Integer id;
    private String firstName;
    private String lastName;
    private String email;
}

Me falta la interface de acceso a JPA(fijate que debe de ser una interfaz:
@Repository
public interface CustomerRepository extends JpaRepository<Customer,Integer>{}
Realmente no tengo por que declarar métodos,pero si que tengo que crearla.

Inyecto esta interfaz en el servicio,que como es un record pues lo paso al principio:
@Service
public record CustomerService(CustomerRepository customerRepository) {

    public void registerCustomer(CustomerRegistrationRequest request) {
        Customer customer = Customer.builder()
                .firstName(request.firstName())
                .lastName(request.lastName())
                .email(request.email())
                .build();
        // todo: check if email valid
        // todo: check if email not taken
        // todo: store customer in db
        customerRepository.save(customer);
    }
}
Fijate que el enpoint ya está esperando un body y llamará a este registerCustomer.Puedo probarlo en Postman.
Y recuerda que no puedo usar localhost,pero si puedo 127.0.0.1 o 0.0.0.0

							VIDEO 02

Bien,lo primero que tengo que tener en cuenta es que customer esta usando el puerto 8080 asi que fraud tendrá que usar otro(  Tomcat started on port(s): 8080 (http))

Bien,ya haré esto cuando llegue a ese archivo,de momento agrego la dependencia para REST:
  <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    </dependencies>

Y creo la clase que arranque el sistema distribuido anotandola con @SpringbootApplication(y creo este modulo eligiendo module).Creo el application.yaml.

IMPORTANTE: en un proyecto real deberia crear otra DB,sin embargo no lo vamos a hacer por no gastar recursos.Asi que creo la db 'fraud' en la misma imagen 

Bien.La entidad lucirá asi:

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Entity
public class FraudCheckHistory {
    @Id
    @SequenceGenerator(
            name = "fraud_id_sequence",
            sequenceName = "fraud_id_sequence",
            )
    @GeneratedValue(
            strategy = GenerationType.SEQUENCE,
            generator = "fraud_id_sequence")
    private Integer id;
    private Integer customerId;
    private Boolean isFraudster;
    private LocalDateTime createdAt;
}
Fijate que las anotó con los mismos @Data @AllArgsConstructor @NoArgsConstructor @Entity y @Builder
Tiempo del Service y el Controller
Mayusculas+Intro bajo con el cursor(en VSC es Ctrl+Intro)

NOTA: fijate que puedo traerme un param como Integer:

    @PostMapping(path="{customerId}")
    public FraudCheckResponse isFraudster(
            @PathVariable("customerId") Integer customerId) { 
        boolean isFraudulentCustomer =  fraudCheckService.isFraudulent(customerId);
        return new FraudCheckResponse( isFraudulentCustomer);
    }

			MANEJAR COMUNICACIONES ENTRE MICROSERVICIOS

En este punto necesitamos que el customer:8080 se comunique con fraud:8081.hay múltiples formas de hacer esto.Una es usando RestTemplate,otra es usando Service Discovery(de forma que eliminemos el uso de puertos) y también veremos OPEN FAI

METODO RESTTEMPLATE: creo una clase en el modulo 'customer',la anoto con @Configutation y creo un Bean de tipo RestTemplate:

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

@Configuration
public class CustomerConfig {

    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}

NOTA: con el método saveAndFlush puedo acceder al id en la siguiente linea de código.Es como una Promise,el código va a esperar a que se resuelva ese guardado
  customerRepository.saveAndFlush(customer);
        // todo: check if fraudster
        restTemplate.getForObject("http://localhost:8081/api/v1/fraud-check/{customerId}",
                FraudCheckResponse.class, customer.getId());

Realmente esto es lo mínimo,y realmente no se usa,ya que no queremos pasar las URLs en duro.¿Y si tuviera dos instancias de customer?Obviamente esta aproximación es de juguete y no se sostiene:

   FraudCheckResponse fraudCheckResponse =  restTemplate.getForObject("http://localhost:8081/api/v1/fraud-check/{customerId}",
                FraudCheckResponse.class, customer.getId());

        if (fraudCheckResponse.isFraudster()) {
            throw new IllegalStateException("Customer is a fraudster");
        }

			VIDEO 03 SERVICE DISCOVERY WITH EUREKA SERVER

Service Discovery es el proceso de automáticamente detectar dispositivos y servicios en una network.Es por esto que detectará los Services de nuestro sistema distribuido.
En cuanto a un Eureka Server más o menos el flujo es el siguiente(fijese que para el Eureka Server los microservicios son clientes):

PASO 1- Cuando un cliente(un MS) se inicie,se registrará como cliente en el Eureka Server(por ejemplo nuestro customer informaría que está en el 8080 y si tuviera dos copias de fraud dirían al Eureka que están en el 8081 y 8085 por ejemplo

PASO 2- Si ahora un cliente quiere comunicarse con otro,lo primero que hace es mandar una petición al Eureka Server pidiendo la localización de éste(Service Discovery Request)

PASO 3- El Eureka Server responde con esa localización de un cliente registrado al cliente que lo pidió(puede devolver el 8081 o el 8085 si están replicados)

NOTA: El Eureka Server es un SPOF,es un cuello de botella ya que se comunicarán todos con el de forma masiva.Es importante asegurarse que nunca caerá,ya que caería todo el sistema(replicación,backups de la info,etc..)

Instalando Spring Cloud: para instalar Cloud voy a https://spring.io/projects/spring-cloud y eligo la release train deseada(usaremos 2020.0.3)
En el pom.xml general pego la siguiente dependencia para que la eliga el que quiera(fijate que también dejé la dependencia para spring-boot):
	
* En la parte de resolucion de variables
  <spring.cloud-version>2020.0.3</spring.cloud-version>
* Ver proyecto si es necesario
  <dependency>
     <groupId>org.springframework.cloud</groupId>
     <artifactId>spring-cloud-dependencies</artifactId>
     <version>${spring.cloud-version}</version>
     <type>pom</type>
     <scope>import</scope>
 </dependency>

Creo un nuevo modulo maven y lo llamo eureka-server.En su pom.xml inyecto la siguiente dependencia:
  <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>
    </dependencies>

Creo su clase starter y fijate que usaré la annotation @EnableEurekaServer:

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;

@SpringBootApplication
@EnableEurekaServer
public class EurekaServerApplication {

    public static void main(String[] args) {
        SpringApplication.run(EurekaServerApplication.class, args);
    }
}

Creo el application.yml para este modulo eureka-server:
server:
  port: 8761
eureka:
  client:
    fetch-registry: false
    register-with-eureka: false

Fijate que no quiero que el propio servidor se registre a si mismo,por eso van dos falses.

Arranco la aplicación y puedo ir a localhost:8761 y ver el dashboard de Eureka Server.La zona que me importa es donde dice 'Instances currently registered with Eureka',y obviamente no tengo ninguna pues no he levantado los otros procesos(ni siquiera los he configurado tampoco).

NOTA: un poco más abajo puedo ver la RAM que está consumiento(unos 96mb),los nucleos,uso de esa RAM,la IP...

				CONFIGURING EUREKA CLIENTS

Empecemos por el customer.Vamos al pom.xml y añado la dependency para el eureka-server(fijate que será client y no server) 
.Fijate que tendré que hacer lo mismo para cada sistema que quiera comunicarse y ser accesable por otros.

   <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
   </dependency>

Y de igual manera tendré que anotar la clase principal,pero con @EnableEurekaClient en vez de con @EnableEurekaServer:

@SpringBootApplication
@EnableEurekaClient
public class CustomerApplication {
    public static void main(String[] args) {
        SpringApplication.run(CustomerApplication.class,args);
    }
}

Por último añado esto al application.yml:
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/

Repetir proceso para el MS fraud,aunque primero vamos a levantar este proceso parasegurarnos que lo hicimos correctamente
NOTA:puedo ver que siempre debo nombrar las aplicaciones con spring.application.name

Si replico alguna aplicación veré también que son recogidas en base al name,asi que es importantísimo pues nombrar los servicios.

					COMUNICATION - LOAD BALANCING REQUESTS

Recordemos que el objetivo principal de usr Eureka Server es no tener que usar código en duro de esta forma(y solo tener que ocuparnos del nombre:

Cambiamos esto:
  FraudCheckResponse fraudCheckResponse =  restTemplate
    .getForObject(
      "http://localhost:8081/api/v1/fraud-check/{customerId}",
     FraudCheckResponse.class, customer.getId());

por esto:
   FraudCheckResponse fraudCheckResponse =  restTemplate
                .getForObject(
                        "http://FRAUD/api/v1/fraud-check/{customerId}",
                FraudCheckResponse.class, customer.getId());

Ojo,es el nombre en uppercase.Esto no es todo.RestTemplate estará confuso,no sabe a que instancia de FRAUD debe mandar la petición.¿Como puede saberlo?Necesita la annotation @LoadBalanced:

* En CustomerConfig.java:
@Configuration
public class CustomerConfig {

    @Bean
    @LoadBalanced
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}
Ahora si,RestTemplate ya sabŕa balancear las peticiones a cada Servicio(en Rounded Robbin | equitativamente).
Service Discovery es un concepto importante que debo entender.Cuando use Kubernetes obtendré Service Discovery free,lo cual es un dolor de cabeza menos del que preocuparse.Sin embargo debe quedar claro el concepto,y lo hizo.

				VIDEO 04 LOAD BALANCES - WHAT IS A LOAD BALANCER


